{"version":3,"sources":["types.tsx"],"names":["DdSdkConfiguration","constructor","clientToken","env","applicationId"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,kBAAN,CAAyB;AAC9BC,EAAAA,WAAW,CACAC,WADA,EAEAC,GAFA,EAGAC,aAHA,EAIT;AAAA,SAHSF,WAGT,GAHSA,WAGT;AAAA,SAFSC,GAET,GAFSA,GAET;AAAA,SADSC,aACT,GADSA,aACT;AAAE;;AAL0B;AAQhC;AACA;AACA","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\n/**\n * A configuration object to initialize Datadog's features.\n */\nexport class DdSdkConfiguration {\n  constructor(\n    readonly clientToken: string,\n    readonly env: string,\n    readonly applicationId: string\n  ) {}\n}\n\n/**\n * The entry point to initialize Datadog's features.\n */\nexport type DdSdkType = {\n  /**\n   * Initializes Datadog's features.\n   * configuration: The configuration to use.\n   */\n  initialize(configuration: DdSdkConfiguration): Promise<void>;\n\n};\n\n/**\n * The entry point to use Datadog's Logs feature.\n */\nexport type DdLogsType = {\n  /**\n   * Send a log with level debug.\n   * message: The message to send.\n   * context: The additional context to send.\n   */\n  debug(message: string, context: object): Promise<void>;\n\n  /**\n   * Send a log with level info.\n   * message: The message to send.\n   * context: The additional context to send.\n   */\n  info(message: string, context: object): Promise<void>;\n\n  /**\n   * Send a log with level warn.\n   * message: The message to send.\n   * context: The additional context to send.\n   */\n  warn(message: string, context: object): Promise<void>;\n\n  /**\n   * Send a log with level error.\n   * message: The message to send.\n   * context: The additional context to send.\n   */\n  error(message: string, context: object): Promise<void>;\n\n};\n\n/**\n * The entry point to use Datadog's Trace feature.\n */\nexport type DdTraceType = {\n  /**\n   * Start a span, and returns a unique identifier for the span.\n   * operation: The operation name of the span.\n   * timestampMs: The timestamp when the operation started (in milliseconds).\n   * context: The additional context to send.\n   */\n  startSpan(operation: string, timestampMs: number, context: object): Promise<string>;\n\n  /**\n   * Finish a started span.\n   * spanId: The unique identifier of the span.\n   * timestampMs: The timestamp when the operation stopped (in milliseconds).\n   * context: The additional context to send.\n   */\n  finishSpan(spanId: string, timestampMs: number, context: object): Promise<void>;\n\n};\n\n/**\n * The entry point to use Datadog's RUM feature.\n */\nexport type DdRumType = {\n  /**\n   * Start tracking a RUM View.\n   * key: The view unique key identifier.\n   * name: The view name.\n   * timestampMs: The timestamp when the view started (in milliseconds).\n   * context: The additional context to send.\n   */\n  startView(key: string, name: string, timestampMs: number, context: object): Promise<void>;\n\n  /**\n   * Stop tracking a RUM View.\n   * key: The view unique key identifier.\n   * timestampMs: The timestamp when the view stopped (in milliseconds).\n   * context: The additional context to send.\n   */\n  stopView(key: string, timestampMs: number, context: object): Promise<void>;\n\n  /**\n   * Start tracking a RUM Action.\n   * type: The action type (tap, scroll, swipe, click, custom).\n   * name: The action name.\n   * timestampMs: The timestamp when the action started (in milliseconds).\n   * context: The additional context to send.\n   */\n  startAction(type: string, name: string, timestampMs: number, context: object): Promise<void>;\n\n  /**\n   * Stop tracking the ongoing RUM Action.\n   * timestampMs: The timestamp when the action stopped (in milliseconds).\n   * context: The additional context to send.\n   */\n  stopAction(timestampMs: number, context: object): Promise<void>;\n\n  /**\n   * Add a RUM Action.\n   * type: The action type (tap, scroll, swipe, click, custom).\n   * name: The action name.\n   * timestampMs: The timestamp when the action occurred (in milliseconds).\n   * context: The additional context to send.\n   */\n  addAction(type: string, name: string, timestampMs: number, context: object): Promise<void>;\n\n  /**\n   * Start tracking a RUM Resource.\n   * key: The resource unique key identifier.\n   * method: The resource method (GET, POST, …).\n   * url: The resource url.\n   * timestampMs: The timestamp when the resource started (in milliseconds).\n   * context: The additional context to send.\n   */\n  startResource(key: string, method: string, url: string, timestampMs: number, context: object): Promise<void>;\n\n  /**\n   * Stop tracking a RUM Resource.\n   * key: The resource unique key identifier.\n   * statusCode: The resource status code.\n   * kind: The resource's kind (xhr, document, image, css, font, …).\n   * timestampMs: The timestamp when the resource stopped (in milliseconds).\n   * context: The additional context to send.\n   */\n  stopResource(key: string, statusCode: number, kind: string, timestampMs: number, context: object): Promise<void>;\n\n  /**\n   * Add a RUM Error.\n   * message: The error message.\n   * source: The error source (network, source, console, logger, …).\n   * stacktrace: The error stacktrace.\n   * timestampMs: The timestamp when the error occurred (in milliseconds).\n   * context: The additional context to send.\n   */\n  addError(message: string, source: string, stacktrace: string, timestampMs: number, context: object): Promise<void>;\n\n};\n\n"]}